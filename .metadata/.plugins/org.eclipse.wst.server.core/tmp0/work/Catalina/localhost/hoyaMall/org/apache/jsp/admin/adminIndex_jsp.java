/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.34
 * Generated at: 2021-08-17 07:21:21 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.admin;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import vo.*;

public final class adminIndex_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("vo");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");

request.setCharacterEncoding("utf-8");
AdminInfo adminLoginMember = (AdminInfo)session.getAttribute("adminLoginMember");
int pageCnt = Integer.parseInt(request.getParameter("pageCnt"));
System.out.println(pageCnt + "어드민인덱스");

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang=\"en\">\r\n");
      out.write("  <head>\r\n");
      out.write("    <meta charset=\"UTF-8\" />\r\n");
      out.write("    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\" />\r\n");
      out.write("    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\" />\r\n");
      out.write("    <title>Document</title>\r\n");
      out.write("    <!-- 관리자 메인페이지로써 페이지가 로드될때 자연스럽게 배경이 어두워지고 이미지형식의 카드가 메뉴로 나타난다 -->\r\n");
      out.write("    <style>\r\n");
      out.write("    body{\r\n");
      out.write("    animation: fadein 2000ms ease-out;\r\n");
      out.write("    -moz-animation: fadein 2000ms ease-out; /* Firefox */\r\n");
      out.write("    -webkit-animation: fadein 2000ms ease-out; /* Safari and  Chrome */\r\n");
      out.write("    -o-animation: fadein 2000ms ease-out; /* Opera */\r\n");
      out.write("}\r\n");
      out.write("@keyframes fadein {\r\n");
      out.write("    from {opacity:0;}\r\n");
      out.write("    to {opacity:1;}\r\n");
      out.write("}\r\n");
      out.write("@-moz-keyframes fadein { /* Firefox */\r\n");
      out.write("    from {opacity:0;}\r\n");
      out.write("    to {opacity:1;}\r\n");
      out.write("}\r\n");
      out.write("@-webkit-keyframes fadein { /* Safari and Chrome */\r\n");
      out.write("    from {opacity:0;}\r\n");
      out.write("    to {opacity:1;}\r\n");
      out.write("}\r\n");
      out.write("@-o-keyframes fadein { /* Opera */\r\n");
      out.write("    from {opacity:0;}\r\n");
      out.write("    to {opacity: 1;}\r\n");
      out.write("}\r\n");
      out.write("      .container {\r\n");
      out.write("        position: fixed;\r\n");
      out.write("        top: 0;\r\n");
      out.write("        left: 0;\r\n");
      out.write("        width: 100%;\r\n");
      out.write("        height: 100vh;\r\n");
      out.write("        background-color: rgba(0, 0, 0, 0.4);\r\n");
      out.write("        z-index: 1000;\r\n");
      out.write("      }\r\n");
      out.write("      .sort {\r\n");
      out.write("        width: 100%;\r\n");
      out.write("        height: 100%;\r\n");
      out.write("        display: flex;\r\n");
      out.write("        flex-direction: row;\r\n");
      out.write("        flex-wrap: nowrap;\r\n");
      out.write("        justify-content: center;\r\n");
      out.write("        align-items: center;\r\n");
      out.write("      }\r\n");
      out.write("      .wrap {\r\n");
      out.write("        margin: 0 auto;\r\n");
      out.write("        width: 800px;\r\n");
      out.write("        display: flex;\r\n");
      out.write("        flex-direction: row;\r\n");
      out.write("        flex-wrap: wrap;\r\n");
      out.write("        justify-content: center;\r\n");
      out.write("        align-items: center;\r\n");
      out.write("      }\r\n");
      out.write("      .std {\r\n");
      out.write("        width: 200px;\r\n");
      out.write("        height: 200px;\r\n");
      out.write("        border: 1px solid white;\r\n");
      out.write("        margin: 26px;\r\n");
      out.write("        background-color: #ffffff;\r\n");
      out.write("        border-radius: 10%;\r\n");
      out.write("        display: flex;\r\n");
      out.write("        flex-direction: row;\r\n");
      out.write("        flex-wrap: nowrap;\r\n");
      out.write("        justify-content: center;\r\n");
      out.write("        align-items: center;\r\n");
      out.write("      }\r\n");
      out.write("      #outBtn {\r\n");
      out.write("      \tbackground:none;\r\n");
      out.write("      \tborder: none;\r\n");
      out.write("      }\r\n");
      out.write("      .log {\r\n");
      out.write("       \tdisplay: flex;\r\n");
      out.write("        flex-direction: row;\r\n");
      out.write("        flex-wrap: nowrap;\r\n");
      out.write("        justify-content:space-between;\r\n");
      out.write("        align-items: center;\r\n");
      out.write("        margin-top: 10px;\r\n");
      out.write("        padding: 0px 10px;\r\n");
      out.write("      }\r\n");
      out.write("      .std {\r\n");
      out.write("      \tcursor:pointer;\r\n");
      out.write("      }\r\n");
      out.write("    </style>\r\n");
      out.write("    <script src=\"jquery-3.5.1.js\"></script>\r\n");
      out.write("    <script>\r\n");
      out.write("\t$(function($) {\r\n");
      out.write("\t$(\"body\").css(\"display\", \"none\");\r\n");
      out.write("\t$(\"body\").fadeIn(2000);\r\n");
      out.write("\t$(\"a.transition\").click(function(event){\r\n");
      out.write("\tevent.preventDefault();\r\n");
      out.write("\tlinkLocation = this.href;\r\n");
      out.write("\t$(\"body\").fadeOut(1000, redirectPage);\r\n");
      out.write("\t\t});\r\n");
      out.write("\tfunction redirectPage() {\r\n");
      out.write("\twindow.location = linkLocation;\r\n");
      out.write("\t\t}\r\n");
      out.write("\t});\r\n");
      out.write("\t</script>\r\n");
      out.write("  </head>\r\n");
      out.write("  <body>\r\n");
      out.write("    <!-- 컨테이너는 배경색을 어둡게 만들어주기위해서도 필요함 -->\r\n");
      out.write("    <div class=\"container\">\r\n");
      out.write("    \r\n");
      out.write("    ");

    	if(adminLoginMember != null){
    
      out.write("\r\n");
      out.write("    <div class=\"log Status\" style=\"color:#ffffff;\">");
      out.print(adminLoginMember.getAl_id() );
      out.write('(');
      out.print(adminLoginMember.getAl_name() );
      out.write(")\r\n");
      out.write("    <button type=\"button\" onclick=\"location.href='admin_logout.adminlog';\" id=\"outBtn\" ><img src=\"images/out.png\" alt=\"로그아웃\" width=\"23px\" height=\"23px\" style=\"cursor: pointer;\" title=\"로그아웃\"/></button>\r\n");
      out.write("    </div>\r\n");
      out.write("    ");
 }else{ 
      out.write("\r\n");
      out.write("    \t<script type=\"text/javascript\">\r\n");
      out.write("    \t\talert(\"잘못된 경로로 들어왔습니다.\");\r\n");
      out.write("    \t\tlocation.href=\"admin_login_view.adminlog\";\r\n");
      out.write("    \t</script>\r\n");
      out.write("    ");
 } 
      out.write("\r\n");
      out.write("      <div class=\"sort\">\r\n");
      out.write("        <div class=\"wrap\">\r\n");
      out.write("          <div class=\"adminManage std\">\r\n");
      out.write("            <img\r\n");
      out.write("              src=\"images/manage.png\"\r\n");
      out.write("              alt=\"관리자관리\"\r\n");
      out.write("              width=\"120px\"\r\n");
      out.write("              height=\"120px\"\r\n");
      out.write("              id=\"img1\"\r\n");
      out.write("            />\r\n");
      out.write("          </div>\r\n");
      out.write("          <div class=\"memManage std\" onclick=\"location.href='admin_member_list.amm?pageCnt=");
      out.print(++pageCnt);
      out.write("'\">\r\n");
      out.write("            <img\r\n");
      out.write("              src=\"images/member.png\"\r\n");
      out.write("              alt=\"회원관리\"\r\n");
      out.write("              width=\"120px\"\r\n");
      out.write("              height=\"120px\"\r\n");
      out.write("              id=\"img2\"\r\n");
      out.write("            />\r\n");
      out.write("          </div>\r\n");
      out.write("          <div class=\"product std\" onclick=\"location.href='admin_product_list.apdt';\">\r\n");
      out.write("            <img\r\n");
      out.write("              src=\"images/product.png\"\r\n");
      out.write("              alt=\"상품관리\"\r\n");
      out.write("              width=\"120px\"\r\n");
      out.write("              height=\"120px\"\r\n");
      out.write("              id=\"img3\"\r\n");
      out.write("            />\r\n");
      out.write("          </div>\r\n");
      out.write("          <div class=\"ord std\">\r\n");
      out.write("            <img src=\"images/order.png\" alt=\"주문관리\" width=\"120px\" height=\"120px\"  />\r\n");
      out.write("          </div>\r\n");
      out.write("          <div class=\"board std\">\r\n");
      out.write("            <img src=\"images/cum.png\" alt=\"게시판관리\" width=\"120px\" height=\"120px\" />\r\n");
      out.write("          </div>\r\n");
      out.write("          <div class=\"stats std\">\r\n");
      out.write("            <img src=\"images/setting.png\" alt=\"통계\" width=\"120px\" height=\"120px\" />\r\n");
      out.write("          </div>\r\n");
      out.write("        </div>\r\n");
      out.write("      </div>\r\n");
      out.write("    </div>\r\n");
      out.write("  </body>\r\n");
      out.write("  <script>\r\n");
      out.write("    const adminManage = document.querySelector(\".adminManage\");\r\n");
      out.write("    const memManage = document.querySelector(\".memManage\");\r\n");
      out.write("    const product = document.querySelector(\".product\");\r\n");
      out.write("    const order = document.querySelector(\".ord\");\r\n");
      out.write("    const board = document.querySelector(\".board\");\r\n");
      out.write("    const stats = document.querySelector(\".stats\");\r\n");
      out.write("\r\n");
      out.write("    adminManage.addEventListener(\"mouseover\", () => {\r\n");
      out.write("      // 6개를 개별로 이벤트리스너를 먹이는것이 아니라 하나의 작업으로 해결할수있지않을까\r\n");
      out.write("      // 여섯개의 이벤트는 전부 동일 그리고 이미지를 특정 글자로 바꾸는것임\r\n");
      out.write("      adminManage.innerHTML = \"\";\r\n");
      out.write("      adminManage.innerText = \"관리자관리\";\r\n");
      out.write("    });\r\n");
      out.write("    adminManage.addEventListener(\"mouseout\", () => {\r\n");
      out.write("      adminManage.innerText = \"\";\r\n");
      out.write("      adminManage.innerHTML =\r\n");
      out.write("        \"<img src='images/manage.png' alt='관리자관리' width='120px' height='120px' id='img1'/>\";\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    memManage.addEventListener(\"mouseover\", () => {\r\n");
      out.write("      memManage.innerHTML = \"\";\r\n");
      out.write("      memManage.innerText = \"회원관리\";\r\n");
      out.write("    });\r\n");
      out.write("    memManage.addEventListener(\"mouseout\", () => {\r\n");
      out.write("      memManage.innerText = \"\";\r\n");
      out.write("      memManage.innerHTML =\r\n");
      out.write("        \"<img src='images/member.png' alt='회원관리' width='120px' height='120px' id='img1'/>\";\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    product.addEventListener(\"mouseover\", () => {\r\n");
      out.write("      // 6개를 개별로 이벤트리스너를 먹이는것이 아니라 하나의 작업으로 해결할수있지않을까\r\n");
      out.write("      // 여섯개의 이벤트는 전부 동일 그리고 이미지를 특정 글자로 바꾸는것임\r\n");
      out.write("      product.innerHTML = \"\";\r\n");
      out.write("      product.innerText = \"상품관리\";\r\n");
      out.write("    });\r\n");
      out.write("    product.addEventListener(\"mouseout\", () => {\r\n");
      out.write("      // 6개를 개별로 이벤트리스너를 먹이는것이 아니라 하나의 작업으로 해결할수있지않을까\r\n");
      out.write("      // 여섯개의 이벤트는 전부 동일 그리고 이미지를 특정 글자로 바꾸는것임\r\n");
      out.write("      product.innerText = \"\";\r\n");
      out.write("      product.innerHTML =\r\n");
      out.write("        \"<img src='images/product.png' alt='상품관리' width='120px' height='120px' id='img1'/>\";\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    order.addEventListener(\"mouseover\", () => {\r\n");
      out.write("      // 6개를 개별로 이벤트리스너를 먹이는것이 아니라 하나의 작업으로 해결할수있지않을까\r\n");
      out.write("      // 여섯개의 이벤트는 전부 동일 그리고 이미지를 특정 글자로 바꾸는것임\r\n");
      out.write("      order.innerHTML = \"\";\r\n");
      out.write("      order.innerText = \"주문관리\";\r\n");
      out.write("    });\r\n");
      out.write("    order.addEventListener(\"mouseout\", () => {\r\n");
      out.write("      // 6개를 개별로 이벤트리스너를 먹이는것이 아니라 하나의 작업으로 해결할수있지않을까\r\n");
      out.write("      // 여섯개의 이벤트는 전부 동일 그리고 이미지를 특정 글자로 바꾸는것임\r\n");
      out.write("      order.innerText = \"\";\r\n");
      out.write("      order.innerHTML =\r\n");
      out.write("        \"<img src='images/order.png' alt='주문관리' width='120px' height='120px' id='img1'/>\";\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    board.addEventListener(\"mouseover\", () => {\r\n");
      out.write("      // 6개를 개별로 이벤트리스너를 먹이는것이 아니라 하나의 작업으로 해결할수있지않을까\r\n");
      out.write("      // 여섯개의 이벤트는 전부 동일 그리고 이미지를 특정 글자로 바꾸는것임\r\n");
      out.write("      board.innerHTML = \"\";\r\n");
      out.write("      board.innerText = \"게시판관리\";\r\n");
      out.write("    });\r\n");
      out.write("    board.addEventListener(\"mouseout\", () => {\r\n");
      out.write("      // 6개를 개별로 이벤트리스너를 먹이는것이 아니라 하나의 작업으로 해결할수있지않을까\r\n");
      out.write("      // 여섯개의 이벤트는 전부 동일 그리고 이미지를 특정 글자로 바꾸는것임\r\n");
      out.write("      board.innerText = \"\";\r\n");
      out.write("      board.innerHTML =\r\n");
      out.write("        \"<img src='images/cum.png' alt='게시판관리' width='120px' height='120px' id='img1'/>\";\r\n");
      out.write("    });\r\n");
      out.write("\r\n");
      out.write("    stats.addEventListener(\"mouseover\", () => {\r\n");
      out.write("      // 6개를 개별로 이벤트리스너를 먹이는것이 아니라 하나의 작업으로 해결할수있지않을까\r\n");
      out.write("      // 여섯개의 이벤트는 전부 동일 그리고 이미지를 특정 글자로 바꾸는것임\r\n");
      out.write("      stats.innerHTML = \"\";\r\n");
      out.write("      stats.innerText = \"통계관리\";\r\n");
      out.write("    });\r\n");
      out.write("    stats.addEventListener(\"mouseout\", () => {\r\n");
      out.write("      // 6개를 개별로 이벤트리스너를 먹이는것이 아니라 하나의 작업으로 해결할수있지않을까\r\n");
      out.write("      // 여섯개의 이벤트는 전부 동일 그리고 이미지를 특정 글자로 바꾸는것임\r\n");
      out.write("      stats.innerText = \"\";\r\n");
      out.write("      stats.innerHTML =\r\n");
      out.write("        \"<img src='images/setting.png' alt='통계관리' width='120px' height='120px' id='img1'/>\";\r\n");
      out.write("    });\r\n");
      out.write("  </script>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
